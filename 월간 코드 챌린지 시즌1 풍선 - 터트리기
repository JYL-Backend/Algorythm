import java.util.*;

class Solution {
    public int solution(int[] a) {
        int length = a.length;
        if(length == 1 || length == 2) return length;
        
        PriorityQueue<Integer> qLeft = new PriorityQueue<Integer>();
        PriorityQueue<Integer> qRight = new PriorityQueue<Integer>();
        
        HashMap<Integer, MaxBoth> hashMaxBoth = new HashMap<>();
        
//         right 삽입
        for(int i=length-1; i>1; i--){
            qRight.offer(a[i]);
            int max = qRight.peek();
            hashMaxBoth.put(i-1,new MaxBoth(0,max));
        }
        
//         left 삽입
        for(int i=0; i<length-2; i++){
            qLeft.offer(a[i]);
            int max = qLeft.peek();
            MaxBoth maxBoth = hashMaxBoth.get(i+1);
            maxBoth.leftMax = max;
            hashMaxBoth.put(i+1, maxBoth);
        }
        
//         양끝은 무조건 가능 = 2
        int answer = 2;
//         검증
        for(int i=1; i<length-1; i++){
            MaxBoth maxBoth = hashMaxBoth.get(i);
            //System.out.println(a[i] + " 검증 left:"+maxBoth.leftMax+" , right:"+maxBoth.rightMax);
            if(maxBoth.leftMax < a[i] && maxBoth.rightMax < a[i]) continue;
            answer++;
        }
        return answer;
    }
    class MaxBoth {
        public int leftMax = 0;
        public int rightMax = 0;
        
        public MaxBoth(int left , int right) {
            this.leftMax = left;
            this.rightMax = right;
        }
    }
}

//https://programmers.co.kr/learn/courses/30/lessons/68646?language=java
